from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser

from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.utils.six import BytesIO

import os,re,copy,json,threading,time,sys

from f5restapi.setting import LOG_FILE
from f5restapi.setting import USER_DATABASES_DIR 
from f5restapi.setting import USER_NAME,USER_PASSWORD
from f5restapi.setting import ENCAP_PASSWORD
from f5restapi.setting import THREAD_TIMEOUT
from f5restapi.setting import RUNSERVER_PORT
from f5restapi.setting import VIRTUALIP_SPLITE_COUNT


## Curl Command Format
## This is the Global Setting Configuration
## 
VIRTUALSERVER_CREATE_CMD_FORMAT = [
                                    {
                                      "device":["10.10.77.29","10.10.77.30","10.10.77.45","10.10.77.46"],
                                      "created_command_sticky":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/virtual/ -H 'Content-Type: application/json' -X POST -d '{\"name\":\"%(virtualservername)s\",\"destination\":\"%(destination)s\",\"ip-protocol\":\"tcp\",\"pool\":\"%(poolname)s\",\"mirror\":\"enabled\",\"profiles\":[\"fastL4\"],\"rules\":[\"/Common/vip_from_was_web_snatpool\"],\"persist\":[{\"name\":\"source_addr_300\",\"partition\":\"Common\",\"tmDefault\":\"yes\"}],\"sourceAddressTranslation\":{}}'",
                                      "created_command_basic":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/virtual/ -H 'Content-Type: application/json' -X POST -d '{\"name\":\"%(virtualservername)s\",\"destination\":\"%(destination)s\",\"ip-protocol\":\"tcp\",\"pool\":\"%(poolname)s\",\"mirror\":\"enabled\",\"profiles\":[\"fastL4\"],\"rules\":[\"/Common/vip_from_was_web_snatpool\"],\"persist\":[],\"sourceAddressTranslation\":{}}'"
                                    },
                                    {
                                      "device":["10.10.77.31","10.10.77.32","10.10.77.33","10.10.77.34"],
                                      "created_command_sticky":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/virtual/ -H 'Content-Type: application/json' -X POST -d '{\"name\":\"%(virtualservername)s\",\"destination\":\"%(destination)s\",\"ip-protocol\":\"tcp\",\"pool\":\"%(poolname)s\",\"mirror\":\"enabled\",\"profiles\":[\"fastL4\"],\"rules\":[],\"persist\":[{\"name\":\"source_addr_300\",\"partition\":\"Common\",\"tmDefault\":\"yes\"}],\"sourceAddressTranslation\":{\"type\":\"automap\"}}'",
                                      "created_command_basic":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/virtual/ -H 'Content-Type: application/json' -X POST -d '{\"name\":\"%(virtualservername)s\",\"destination\":\"%(destination)s\",\"ip-protocol\":\"tcp\",\"pool\":\"%(poolname)s\",\"mirror\":\"enabled\",\"profiles\":[\"fastL4\"],\"rules\":[],\"persist\":[],\"sourceAddressTranslation\":{\"type\":\"automap\"}}'"
                                    }  
                                  ]

POOL_CREATE_CMD_FORMAT = [
                           {
                             "device":["10.10.77.29","10.10.77.30","10.10.77.31","10.10.77.32","10.10.77.33","10.10.77.34","10.10.77.45","10.10.77.46"],
                             "created_command":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/pool/ -H 'Content-Type: application/json' -X POST -d '{\"name\":\"%(poolname)s\",\"members\":\"%(poolmembers)s\",\"monitor\":\"/Common/tcp_skp\",\"serviceDownAction\":\"reset\",\"loadBalancingMode\":\"round-robin\"}'"
                           }
                         ]

COMMOM_CMD_FORMAT = { 
                      "delete_pool_command":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/pool/%(poolname)s -H 'Content-Type: application/json' -X DELETE",
                      "delete_virtualserver_command":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/virtual/%(virtualservername)s -H 'Content-Type: application/json' -X DELETE",
                      "sync_command":"curl -sk -u %(username)s:%(password)s https://%(device)s/mgmt/tm/ltm/pool/ -H 'Content-Type: application/json' -X POST -d '{\"command\":\"run\",\"utilCmdArgs\":\"config-sync to-group %(syncgroup)s\"}'"
                    }


class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders its content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)

  
def get_poolinfo():

    try:
       # read db file
       _devicelist_db_ = USER_DATABASES_DIR + "devicelist.txt"
       f = open(_devicelist_db_,'r')
       _string_contents_ = f.readlines()
       f.close()
       stream = BytesIO(_string_contents_[0])
       _data_from_devicelist_db_= JSONParser().parse(stream)

       # standby server list
       standby_device_list = []           
       for _dict_information_ in _data_from_devicelist_db_:
           if re.match('standby',str(_dict_information_[u'failover'])):
              if str(_dict_information_[u'ip']) not in standby_device_list:
                 standby_device_list.append(str(_dict_information_[u'ip']))

       fileindatabasedir = os.listdir(USER_DATABASES_DIR)
       # re-arrange the pool information
       virtualserver_and_pool_info_dict = {}
       for _filename_ in fileindatabasedir:
          if re.search("poollist.[0-9]+.[0-9]+.[0-9]+.[0-9]+.txt",_filename_):

             _database_target_ = re.search("[0-9]+.[0-9]+.[0-9]+.[0-9]+",_filename_).group(0)
             if str(_database_target_).strip() in standby_device_list:

                # Pool information Re-arrange.
                f = open(USER_DATABASES_DIR+_filename_,"r")
                _contents_ = f.readlines()
                f.close()
                stream = BytesIO(_contents_[0])
                data_from_file = JSONParser().parse(stream)

                _Re_Poolinfo_ = {}
                for _dict_Data_ in data_from_file[u'items']:
                   ### 2016.05.11 : change pool name to pool name with status information 
                   # _Re_Poolinfo_[str(_dict_Data_[u'name'])] = _dict_Data_[u'poolmember_names']
                   #
                   _Re_Poolinfo_[str(_dict_Data_[u'name'])] = _dict_Data_[u'poolmember_status']

                # Virtual Server Information
                _filename_for_virtualserver_ = USER_DATABASES_DIR+"virtualserverlist."+_database_target_+".txt"
                f = open(_filename_for_virtualserver_,"r")
                _contents_ = f.readlines()
                f.close()
                stream = BytesIO(_contents_[0])
                data_from_file = JSONParser().parse(stream)

                virtualserver_and_pool_info_list = []
                for _dict_Data_ in data_from_file[u'items']:
                   _temp_dict_box_ = {}
                   if u'pool' in _dict_Data_.keys() or str(u'pool') in _dict_Data_.keys():
                      _temp_dict_box_[str(_dict_Data_[u"fullPath"]).strip().split("/")[-1]] = str(_dict_Data_[u"destination"]).strip().split("/")[-1]
                      _temp_dict_box_[str(_dict_Data_[u"pool"]).strip().split("/")[-1]] = _Re_Poolinfo_[str(_dict_Data_[u"pool"]).strip().split("/")[-1]]
                      virtualserver_and_pool_info_list.append(_temp_dict_box_)

                # Virtual Server Information
                virtualserver_and_pool_info_dict[_database_target_] = virtualserver_and_pool_info_list
    except:
       # except
       virtualserver_and_pool_info_dict = {}
       return virtualserver_and_pool_info_dict
    

    # threading must have
    time.sleep(0)
    return virtualserver_and_pool_info_dict


@api_view(['GET','POST'])
@csrf_exempt
def f5_create_config_lb(request,format=None):

   # get method
   if request.method == 'GET':

      # get the result data and return
      message = get_poolinfo()
      return Response(message)


   elif request.method == 'POST':

      try:

        _input_ = JSONParser().parse(request)
        
        if re.match(ENCAP_PASSWORD,str(_input_[0]['auth_key'])):
           
           # log message
           f = open(LOG_FILE,"a")
           _date_ = os.popen("date").read().strip()
           log_msg = _date_+" from : "+request.META['REMOTE_ADDR']+" , method POST request to run f5_create_config_lb.py function!\n"
           f.write(log_msg)
           f.close()

           # read device list file
           _devicelist_db_ = USER_DATABASES_DIR + "devicelist.txt"
           f = open(_devicelist_db_,'r')
           _string_contents_ = f.readlines()
           f.close()
           stream = BytesIO(_string_contents_[0])
           _data_from_file_ = JSONParser().parse(stream)
           _data_from_devicelist_db_  = copy.copy(_data_from_file_)

           # user data input values
           _user_input_data_ = copy.copy(_input_[0][u'items'])

           # device input will be exchanged to the active device ip address
           # _user_input_data_device_ip_changed_ is list form 
           _user_input_data_device_ip_changed_ = []
           copy_loop_param = copy.copy(_user_input_data_)
           for _loop1_ in copy_loop_param:
              _device_input_ = str(_loop1_[u'device'])
           
              _target_device_ip_ = '' 
              if re.search("[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+",_device_input_):
                for _loop2_ in _data_from_devicelist_db_:
                   if re.search(str(_device_input_),str(_loop2_[u'ip'])):
                      if re.search(str('active'),(_loop2_[u'failover'])):
                         _target_device_ip_ = str(_loop2_[u'ip'])
                         break
                      else:
                         _object_ = str(_loop2_[u'haclustername'])
                         for _loop3_ in _data_from_devicelist_db_:
                            if re.search(_object_,str(_loop3_[u'clustername'])):
                              _target_device_ip_ = str(_loop3_[u'ip'])
                              break
              else:
                for _loop2_ in _data_from_devicelist_db_:
                   if re.search(_device_input_,str(_loop2_[u'devicehostname'])) or re.search(_device_input_,str(_loop2_[u'clustername'])):
                      if re.search(str('active'),(_loop2_[u'failover'])):
                         _target_device_ip_ = str(_loop2_[u'ip'])
                         break
                      else:
                         _object_ = str(_loop2_[u'haclustername'])
                         for _loop3_ in _data_from_devicelist_db_:
                            if re.search(_object_,str(_loop3_[u'clustername'])):
                              _target_device_ip_ = str(_loop3_[u'ip'])
                              break
                   else:
                      _object_ = str(_loop2_[u'haclustername'])
                      for _loop3_ in _data_from_devicelist_db_:
                         if re.search(_object_,str(_loop3_[u'clustername'])):
                           _target_device_ip_ = str(_loop3_[u'ip'])
                           break

              if re.match('',str(_target_device_ip_)):
                _loop1_[u'device'] = _target_device_ip_
                _user_input_data_device_ip_changed_.append(_loop1_)

           # virtual ip address confirmation
           # virtual ip address should be unique according to the device.
           # input : _user_input_data_device_ip_changed_ (device ip exchanged data)
           # output : _user_input_data_virtualipport_unique_
           _temp_dictbox_ = {}
           for _loop1_ in _user_input_data_device_ip_changed_:
              if str(_loop1_[u'device']) not in _temp_dictbox_.keys():
                _temp_dictbox_[str(_loop1_[u'device'])] = {}

           for _loop1_ in _user_input_data_device_ip_changed_:
              if str(_loop1_[u'virtual_ip_port']) not in _temp_dictbox_[str(_loop1_[u'device'])].keys():
                _temp_dictbox_[str(_loop1_[u'device'])][str(_loop1_[u'virtual_ip_port'])] = int(1) 
              else:
                _temp_dictbox_[str(_loop1_[u'device'])][str(_loop1_[u'virtual_ip_port'])] = _temp_dictbox_[str(_loop1_[u'device'])][str(_loop1_[u'virtual_ip_port'])] + int(1)

           _user_input_data_virtualipport_unique_ = []
           for _loop1_ in _user_input_data_device_ip_changed_:
              if _temp_dictbox_[str(_loop1_[u'device'])][str(_loop1_[u'virtual_ip_port'])] == int(1):
                _user_input_data_virtualipport_unique_.append(_loop1_)  

           # find out the database file name
           for _loop1_ in _user_input_data_virtualipport_unique_:
              for _loop2_ in _data_from_devicelist_db_:
                 if re.search(str(_loop1_[u'device']),str(_loop2_[u'ip'])):
                   _loop1_[u'syncgroup'] = str(_loop2_[u'devicegroupname'])
                   for _loop3_ in _data_from_devicelist_db_:
                      if re.match(str(_loop2_[u'haclustername']),str(_loop3_[u'clustername'])):
                        _loop1_[u'pairdevice'] = str(_loop3_[u'ip'])
           
           # virtual server ip port usage confirmation
           # this step will be find out the virtual server usage according to the virtual server ip and port information
           # _user_input_data_virtualipport_unique_ will be updated.
           for _loop1_ in _user_input_data_virtualipport_unique_:
              database_filename = USER_DATABASES_DIR+"virtualserverlist."+str(_loop1_[u'pairdevice'])+".txt"
              f = open(database_filename,"r")
              _contents_ = f.readlines()
              f.close()
              stream = BytesIO(_contents_[0])
              data_from_file = JSONParser().parse(stream)

              _loop1_[u'virtualserver_names_list'] = []
              for _loop2_ in data_from_file[u'items']:
                 if re.search(str(_loop1_[u'virtual_ip_port']),str(_loop2_[u'destination'])):
                   _loop1_[u'virtualserver_names_list'].append(str(_loop2_[u'fullPath']))
            
           # node usage confirmation
           # pool information will be necessary according to node information
           # _user_input_data_virtualipport_unique_ : virtual ip port is checked

           _user_input_data_nodes_confirm_ = copy.copy(_user_input_data_virtualipport_unique_) 
           _temp_traybox_ = {}
           for _loop1_ in _user_input_data_nodes_confirm_:
              if str(_loop1_[u'device']) not in _temp_traybox_.keys():
                _temp_traybox_[str(_loop1_[u'device'])] = {}

           for _loop1_ in _user_input_data_nodes_confirm_:
              for _loop2_ in _loop1_[u'poolmembers']:
                 _temp_traybox_[str(_loop1_[u'device'])][str(_loop2_)] = []

           for _loop1_ in _user_input_data_nodes_confirm_:
              for _loop2_ in _loop1_[u'poolmembers']:
                 database_filename = USER_DATABASES_DIR+"poollist."+str(_loop1_[u'pairdevice'])+".txt"
                 f = open(database_filename,"r")
                 _contents_ = f.readlines()
                 f.close()
                 stream = BytesIO(_contents_[0])
                 data_from_file = JSONParser().parse(stream)
                 
                 for _loop3_ in data_from_file[u'items']:
                    for _loop4_ in _loop3_[u'poolmembers_status_list']:
                       if re.search(str(_loop2_),str(_loop4_)):
                          _temp_traybox_[str(_loop1_[u'device'])][str(_loop2_)].append(str(_loop3_[u'name']))

           for _loop1_ in _user_input_data_nodes_confirm_:
              _temp_dictbox_ = {}
              for _loop2_ in _loop1_[u'poolmembers']:
                 for _loop3_ in _temp_traybox_[str(_loop1_[u'device'])][str(_loop2_)]:
                    if str(_loop3_) not in _temp_dictbox_.keys():
                      _temp_dictbox_[str(_loop3_)] = int(1)
                    else:
                      _temp_dictbox_[str(_loop3_)] = _temp_dictbox_[str(_loop3_)] + int(1)
              _temp_listbox_ = [] 
              for _loop2_ in _temp_dictbox_.keys():
                 if int(_temp_dictbox_[_loop2_]) == int(len(_loop1_[u'poolmembers'])):
                   if str(_loop2_) not in _temp_listbox_:
                     _temp_listbox_.append(str(_loop2_))
              _loop1_[u'poolnames_list'] = _temp_listbox_
                                        
           for _loop1_ in _user_input_data_nodes_confirm_:
              _temp_listbox_ = []
              for _loop2_ in _loop1_[u'poolnames_list']:
                 database_filename = USER_DATABASES_DIR+"poollist."+str(_loop1_[u'pairdevice'])+".txt"
                 f = open(database_filename,"r")
                 _contents_ = f.readlines()
                 f.close()
                 stream = BytesIO(_contents_[0])
                 data_from_file = JSONParser().parse(stream)
                 for _loop3_ in data_from_file[u'items']:
                    if re.search(str(_loop2_),str(_loop3_[u'name'])) and len(_loop1_[u'poolmembers']) == len(_loop3_[u'poolmembers_status_list']):
                      if str(_loop3_[u'name']) not in _temp_listbox_:
                        _temp_listbox_.append(str(_loop3_[u'name']))
              _loop1_[u'poolnames_list'] = _temp_listbox_

           # virtual server and pool name creation
           # _user_input_data_nodes_confirm_ : perfect varidation checked
           _valid_user_input_data_ = []
           for _loop1_ in _user_input_data_nodes_confirm_:
              if len(_loop1_[u'virtualserver_names_list']) != int(0):
                # log message
                f = open(LOG_FILE,"a")
                _date_ = os.popen("date").read().strip()
                log_msg = _date_+" from : "+request.META['REMOTE_ADDR']+" virtual ip port : "+str(_loop1_[u'virtual_ip_port'])+", assigned virtual server :  "+str(','.join(_loop1_[u'virtualserver_names_list']))+" !\n"
                f.write(log_msg)
                f.close()
              else:
                _valid_user_input_data_.append(_loop1_)

           # command creation and f5 rest_api command
           # virtual server name should be empty
           # _valid_user_input_data_ : is full varified data
           for _loop1_ in _valid_user_input_data_:
              _loop1_[u'configCmd'] = {}

           for _loop1_ in _valid_user_input_data_:
              if len(_loop1_[u'virtualserver_names_list']) == int(0):

                 # find out the command format to create the pool
                 command_format_to_pool = {}
                 for _loop2_ in POOL_CREATE_CMD_FORMAT:
                    if str(_loop1_[u'device']) in _loop2_["device"]:
                      command_format_to_pool[u'create'] = _loop2_["created_command"]
                      command_format_to_pool[u'delete'] = COMMOM_CMD_FORMAT["delete_pool_command"]
                      break

                 command_format_to_virtualserver = {}
                 for _loop2_ in VIRTUALSERVER_CREATE_CMD_FORMAT:
                    if str(_loop1_[u'device']) in _loop2_["device"]:
                      command_format_to_virtualserver[u'create_basic'] = _loop2_["created_command_basic"] 
                      command_format_to_virtualserver[u'create_sticky'] = _loop2_["created_command_sticky"] 
                      command_format_to_virtualserver[u'delete'] = COMMOM_CMD_FORMAT["delete_virtualserver_command"]
                      break

                 # create the pool name new and update the pool name and create command
                 _temp_box_ = []
                 _temp_string_box_ = []
                 for _loop2_ in _loop1_[u'poolmembers']:
                    _string_value_ = str(_loop2_).strip()
                    _port_info_ = str(_string_value_.split(':')[-1])
                    if str(_port_info_) not in _temp_box_:
                      _temp_box_.append(str(_port_info_))
                    if str(_string_value_) not in _temp_string_box_:
                      _temp_string_box_.append(str(_string_value_))

                 _name_with_ports_ = str("_".join(_temp_box_)) 
                 _poolmember_string_ = str(" ".join(_temp_string_box_))

                 _servername_ = str('_'.join(str(_loop1_[u'servername']).strip().split('-')))
                 _poolname_created_ = "p_%(servername)s_%(portname)s" % {"servername":_servername_,"portname":_name_with_ports_}

                 # create virtual server
                 _splited_ip_ = str(_loop1_[u'virtual_ip_port']).strip().split()[0]
                 _splited_port_ = str(_loop1_[u'virtual_ip_port']).strip().split()[-1]
                 _rename_ip_value_ = str('.'.join(str(_splited_ip_).split('.')[int(VIRTUALIP_SPLITE_COUNT):]))
                 _virtualservername_created_ = "v_%(ipport)s_%(servername)s_%(portname)s" % {"ipport":_rename_ip_value_,"servername":_servername_,"portname":_splited_port_}
             
                 # create the curl
                 dict_values = {"username":USER_NAME,"password":USER_PASSWORD,"device":str(_loop1_[u'device']),"poolname":_poolname_created_,"syncgroup":str(_loop1_[u'syncgroup']),"poolmembers":_poolmember_string_,"virtualservername":_virtualservername_created_,"destination":str(_loop1_[u'virtual_ip_port'])} 
                 _create_status_ = 1
                 if len(_loop1_[u'poolnames_list']) != int(0):
                   _temp_box_ = []
                   for _loop2_ in _loop1_[u'poolnames_list']:
                      _temp_box_.append(str(_loop2_))
                   if _poolname_created_ in _temp_box_:
                     _create_status_ = 0

                 if _create_status_:
                   _loop1_[u'configCmd'][u'create_pool'] = command_format_to_pool[u'create'] % dict_values
                   _loop1_[u'configCmd'][u'delete_pool'] = command_format_to_pool[u'delete'] % dict_values
                   _loop1_[u'poolnames_list'].append(str(_poolname_created_))

                 # create virtual server curl u'sticky'
                 if u'option' in _loop1_.keys():
                    _temp_box_ = []
                    for _loop2_ in _loop1_[u'option']:
                       _temp_box_.append(str(_loop2_))
                    if str('sticky') in _temp_box_:
                       _loop1_[u'configCmd'][u'create_virtualserver'] = command_format_to_virtualserver[u'create_sticky'] % dict_values
                    else:
                       _loop1_[u'configCmd'][u'create_virtualserver'] = command_format_to_virtualserver[u'create_basic'] % dict_values
                 else:
                    _loop1_[u'configCmd'][u'create_virtualserver'] = command_format_to_virtualserver[u'create_basic'] % dict_values
                 _loop1_[u'configCmd'][u'delete_virtualserver'] = command_format_to_virtualserver[u'delete'] % dict_values

                 # create virtual server curl u'sticky'

                  
                   
           # _valid_user_input_data_ : is full varified data


           #print _command_added_user_input_data_
           print _valid_user_input_data_
            
  
 



 

           sys.exit()



           message = [{}]
           return Response(message)


      except:
        message = [{}]
        return Response(message, status=status.HTTP_400_BAD_REQUEST)

